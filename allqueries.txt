create script 

CREATE TABLE public.model_alert_action
(
    modality character varying COLLATE pg_catalog."default",
    region character varying COLLATE pg_catalog."default",
    country character varying COLLATE pg_catalog."default",
    systemuid character varying COLLATE pg_catalog."default",
    systemtypename character varying COLLATE pg_catalog."default",
    systemtypemodel character varying COLLATE pg_catalog."default",
    catalognum bigint,
    serialnumber bigint,
    aoid character varying COLLATE pg_catalog."default",
    softwareversion character varying COLLATE pg_catalog."default",
    modeluid character varying COLLATE pg_catalog."default",
    modelversion character varying COLLATE pg_catalog."default",
    alerttime timestamp without time zone,
    alertyearmonth character varying COLLATE pg_catalog."default",
    alertname character varying COLLATE pg_catalog."default",
    confidence double precision,
    priority integer,
    alertactiondatetime timestamp without time zone,
    alertaction character varying COLLATE pg_catalog."default",
    snarreason character varying COLLATE pg_catalog."default",
    caseid character varying COLLATE pg_catalog."default",
    ignorealertcaseclosed character varying COLLATE pg_catalog."default",
    ignorealertuntil timestamp without time zone,
    openddate character varying COLLATE pg_catalog."default",
    snarcomments character varying COLLATE pg_catalog."default",
    casecomments character varying COLLATE pg_catalog."default",
    sourcealertid character varying COLLATE pg_catalog."default",
    importtimestamp timestamp without time zone DEFAULT now(),
    model_type character varying COLLATE pg_catalog."default",
    market character varying COLLATE pg_catalog."default",
    custom_snarreason character varying COLLATE pg_catalog."default",
    id integer NOT NULL DEFAULT nextval('model_alert_action_id_seq'::regclass),
    isexclude boolean DEFAULT false,
    sourcefilename character varying COLLATE pg_catalog."default",
    verticaimporttimestamputc timestamp without time zone,
    file_name character varying COLLATE pg_catalog."default"
)




select and insert script
package com.philips.mr.exportradaralertmodelmetadatatables.dataexport;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import com.philips.mr.exportradaralertmodelmetadatatables.connection.PostgresConnection;
import com.philips.mr.exportradaralertmodelmetadatatables.connection.VerticaConnection;
import com.philips.mr.exportradaralertmodelmetadatatables.model.RadarAlertModel;

public class RadarAlertDataTransfer {
	
	public static void importRadarAlertFromVerticaAndExport(String modalityName,String SourceFileName)
			throws ClassNotFoundException, IOException, SQLException {
		List<RadarAlertModel> recordsFromRadarAlert = new ArrayList<>();
		Connection conn = VerticaConnection.getConnection();
		Statement mySelect = conn.createStatement();

		StringBuilder query = new StringBuilder(
				"select Modality, Region, Country, SystemUid, SystemTypeName, SystemTypeModel, CatalogNumber, SerialNumber, M2MMemberName, SoftwareVersion, ModelUid, ModelVersion, AlertTime, AlertYearMonth, AlertName, Confidence, Priority, AlertActionDateTimeUTC, AlertAction, SnarReason, CaseId, IgnoreAlertCaseClosed, IgnoreAlertUntilUTC, OpenedDate, SnarComments, SourceAlertId, ImportTimestampUTC, AppContext, SourceFileName from Development.radar_alerts ");
		query.append( "where AppContext = 'rmw' and Modality='"+ modalityName+"' and to_char(AlertTime,'yyyy')::int = 2019 ")	;
		if(SourceFileName != null && !SourceFileName.isEmpty()) {
		//	query.append( " and SourceFileName > '"+SourceFileName+"'");
		}
		query.append(" GROUP BY (Modality, Region, Country, SystemUid, SystemTypeName, SystemTypeModel, CatalogNumber, SerialNumber, M2MMemberName, SoftwareVersion, ModelUid, ModelVersion, AlertTime, AlertYearMonth, AlertName, Confidence, Priority, AlertActionDateTimeUTC, AlertAction, SnarReason, CaseId, IgnoreAlertCaseClosed, IgnoreAlertUntilUTC, OpenedDate, SnarComments, SourceAlertId, ImportTimestampUTC, AppContext, SourceFileName) ORDER BY(ALertTime, AlertActionDateTimeUTC)");
		if(modalityName.equalsIgnoreCase("ct")) {
//			query = new StringBuilder();
//			query.append( " with subquery as (select Modality, Region, Country, SystemUid, SystemTypeName, SystemTypeModel, CatalogNumber, SerialNumber, M2MMemberName, SoftwareVersion, ModelUid,");
//			query.append( " ModelVersion, AlertTime, AlertYearMonth, AlertName, Confidence, Priority, AlertActionDateTimeUTC, AlertAction, SnarReason, CaseId, IgnoreAlertCaseClosed, ");
//			query.append( " IgnoreAlertUntilUTC, OpenedDate, SnarComments, SourceAlertId, ImportTimestampUTC, AppContext, SourceFileName,AlertCreationId::varchar from development.radar_alerts ");
//			query.append( " where Modality='"+ modalityName+"' and AppContext='rmw' and to_char(AlertTime,'yyyy')='2019') ");
//			query.append( " select s.Modality,s.Region,s.Country,s.SystemUid,s.SystemTypeName,s.SystemTypeModel,s.CatalogNumber,s.SerialNumber,s.M2MMemberName,s.SoftwareVersion,s.ModelUid,s.ModelVersion,s.AlertTime,s.AlertYearMonth,s.AlertName,s.Confidence,s.Priority,s.AlertActionDateTimeUTC,s.AlertAction,s.SnarReason,s.CaseId,s.IgnoreAlertCaseClosed,s.IgnoreAlertUntilUTC,s.OpenedDate,s.SnarComments,s.SourceAlertId,s.ImportTimestampUTC,s.AppContext,s.SourceFileName from subquery s join development.ISDA_model_output_alert o on s.AlertCreationId = o.AlertExecutionInstanceUID ");
//			query.append( " and o.Modality='"+ modalityName+"' ");
//			query.append( " group by ");
//			query.append( " s.Modality,s.Region,s.Country,s.SystemUid,s.SystemTypeName,s.SystemTypeModel,s.CatalogNumber,s.SerialNumber,s.M2MMemberName,s.SoftwareVersion,s.ModelUid,s.ModelVersion,s.AlertTime,s.AlertYearMonth,s.AlertName,s.Confidence,s.Priority,s.AlertActionDateTimeUTC,s.AlertAction,s.SnarReason,s.CaseId,s.IgnoreAlertCaseClosed,s.IgnoreAlertUntilUTC,s.OpenedDate,s.SnarComments,s.SourceAlertId,s.ImportTimestampUTC,s.AppContext,s.SourceFileName ");
//			query.append( " ORDER BY(s.ALertTime, s.AlertActionDateTimeUTC) ");
		}
		ResultSet myResult = mySelect.executeQuery(query.toString());

		System.out.println("getting radar_alert table entries");
		while (myResult.next()) {
			final String modality = myResult.getString(1);
			final String region = myResult.getString(2) != null ? myResult.getString(2) : "";
			final String country = myResult.getString(3) != null ? myResult.getString(3) : "";
			final String systemUid = myResult.getString(4) != null ? myResult.getString(4) : "";
			final String systemTypeName = myResult.getString(5) != null ? myResult.getString(5) : "";
			final String systemTypeModel = myResult.getString(6) != null ? myResult.getString(6) : "";
			Long catalogNumber;
			try {
				catalogNumber = myResult.getLong(7) != 0 ? myResult.getLong(7) : -1l;
			} catch (SQLException s) {
				catalogNumber = -1l;
			}
			Long serialNumber;
			try {
				serialNumber = myResult.getLong(8) != 0 ? myResult.getLong(8) : -1l;
			} catch (SQLException s) {
				serialNumber = -1l;
			}
			final String m2mMemberName = myResult.getString(9) != null ? myResult.getString(9) : "";
			final String softwareVersion = myResult.getString(10) != null ? myResult.getString(10) : "";
			final String modelUid = myResult.getString(11);
			final String modelVersion = myResult.getString(12) != null ? myResult.getString(12) : "";
			final Timestamp alertTime = myResult.getTimestamp(13);
			final String alertYearMonth = myResult.getString(14) != null ? myResult.getString(14) : "";
			final String alertName = myResult.getString(15);
			final double confidence = myResult.getDouble(16) != 0 ? myResult.getDouble(16) : -1d;
			Integer priority;
			try {
				priority = myResult.getInt(17) != 0 ? myResult.getInt(17) : -1;
			} catch (SQLException s) {
				priority = -1;
			}
			final Timestamp alertActionDateTime = myResult.getTimestamp(18);
			final String alertAction = myResult.getString(19) != null ? myResult.getString(19) : "";
			final String snarReason = myResult.getString(20) != null ? myResult.getString(20) : "";
			final String caseId = myResult.getString(21) != null ? myResult.getString(21) : "";
			final String ignoreAlertCaseClosed = myResult.getString(22) != null ? myResult.getString(22) : "";
			final Timestamp ignoreAlertUntilUTC = myResult.getTimestamp(23);
			final String openedDate = myResult.getString(24) != null ? myResult.getString(24) : "";
			final String snarComments = myResult.getString(25) != null ? myResult.getString(25) : "";
			final String sourceAlertId = myResult.getString(26) != null ? myResult.getString(26) : "";
			;
			final Timestamp importTimestampUTC = myResult.getTimestamp(27);
			final String appContext = myResult.getString(28);
			final String sourceFileName = myResult.getString(29);
			recordsFromRadarAlert.add(new RadarAlertModel(modality, region, country, systemUid, systemTypeName,
					systemTypeModel, catalogNumber, serialNumber, m2mMemberName, softwareVersion, modelUid,
					modelVersion, alertTime, alertYearMonth, alertName, confidence, priority, alertActionDateTime,
					alertAction, snarReason, caseId, ignoreAlertCaseClosed, ignoreAlertUntilUTC, openedDate,
					snarComments, sourceAlertId, importTimestampUTC, appContext, sourceFileName));

		}
		mySelect.close();
		conn.close();
		System.out.println("Selection done");
		exportRadarAlertEntriesToPostgres(modalityName, recordsFromRadarAlert);

	}

	private static void exportRadarAlertEntriesToPostgres(String modalityName,
			List<RadarAlertModel> recordsFromRadarAlert) throws IOException, SQLException {
		Connection conn = PostgresConnection.getConnection();
		//System.out.println("delete existing entries in temp_model_alert_action");
		//StringBuilder query = new StringBuilder(
		//		"delete from public.model_alert_action where Modality ='" + modalityName + "';");

		//PreparedStatement preparedStmt = conn.prepareStatement(query.toString());
		//preparedStmt.execute();
		//System.out.println("delete successful in temp_model_alert_action");
		System.out.println("preparing insert query");
		conn.setAutoCommit(false);
		StringBuilder queryToInsert = new StringBuilder(
				"Insert into public.model_alert_action(modality, region, country, systemuid, systemtypename, systemtypemodel, catalognum, serialnumber, aoid, softwareversion, modeluid, modelversion, alerttime, alertyearmonth, alertname, confidence, priority, alertactiondatetime, alertaction, snarreason, caseid, ignorealertcaseclosed, ignorealertuntil, openddate, snarcomments, sourcealertid, verticaimporttimestamputc, model_type, sourcefilename) values"
						+ "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ");
		PreparedStatement pstmt = conn.prepareStatement(queryToInsert.toString());
		{
			int i = 0;
			for (RadarAlertModel entity : recordsFromRadarAlert) {
				pstmt.setString(1, entity.getModality());
				pstmt.setString(2, entity.getRegion());
				pstmt.setString(3, entity.getCountry());
				pstmt.setString(4, entity.getSystemUid());
				pstmt.setString(5, entity.getSystemTypeName());
				pstmt.setString(6, entity.getSystemTypeModel());
				pstmt.setLong(7, entity.getCatalogNumber());
				pstmt.setLong(8, entity.getSerialNumber());
				pstmt.setString(9, entity.getM2mMemberName());
				pstmt.setString(10, entity.getSoftwareVersion());
				pstmt.setString(11, entity.getModelUid());
				pstmt.setString(12, entity.getModelVersion());
				pstmt.setTimestamp(13, entity.getAlertTime());
				pstmt.setString(14, entity.getAlertYearMonth());
				pstmt.setString(15, entity.getAlertName());
				pstmt.setDouble(16, entity.getConfidence());
				pstmt.setInt(17, entity.getPriority());
				pstmt.setTimestamp(18, entity.getAlertActionDateTime());
				pstmt.setString(19, entity.getAlertAction());
				pstmt.setString(20, entity.getSnarReason());
				pstmt.setString(21, entity.getCaseId());
				pstmt.setString(22, entity.getIgnoreAlertCaseClosed());
				pstmt.setTimestamp(23, entity.getIgnoreAlertUntilUTC());
				pstmt.setString(24, entity.getOpenedDate());
				pstmt.setString(25, entity.getSnarComments());
				pstmt.setString(26, entity.getSourceAlertId());
				pstmt.setTimestamp(27, entity.getImportTimestampUTC());
				pstmt.setString(28, entity.getAppContext());
				pstmt.setString(29, entity.getSourceFileName());
				// ...

				pstmt.addBatch();
				i++;

				if (i % 1000 == 0 || i == recordsFromRadarAlert.size()) {
					pstmt.executeBatch(); // Execute every 1000 items.
				}
			}
		}
		conn.commit();
		conn.close();
		System.out.println("insertion successfull");

	}

	public static String getSourceFileName(String modality) throws IOException, SQLException {
		Connection conn = PostgresConnection.getConnection();
		conn.setAutoCommit(false);
		String sourceFileName = null;
		StringBuilder query = new StringBuilder(" select max(sourcefilename) from public.model_alert_action where modality='"+modality+"'");
		Statement mySelect = conn.createStatement();
		ResultSet myResult = mySelect.executeQuery(query.toString());
		while (myResult.next()) {
			sourceFileName = myResult.getString(1);
		}
		conn.commit();
		conn.close();
		return sourceFileName;
	}
	
	public static void executePostProcessingQuery(String modality) throws IOException, SQLException{
		Connection conn = PostgresConnection.getConnection();
		conn.setAutoCommit(false);
		String query = "";
		updateDeleteFlag(modality);
		refreshModelAlertView();
		removeDuplicateValues(modality);
		query = " with subquery as (select market, lower(country) as country from mr.mr_cases group by market, country)  ";
		query += " UPDATE public.model_alert_action AS m SET market = s.market FROM subquery AS s WHERE lower(m.country) = s.country  ";
		executeQuery(conn,query);
		updateCaseid(conn);
		updateMarketInfo(conn);
		updateCustomSnarReason(conn);
		conn.commit();
		conn.close();
	}

	private static void updateDeleteFlag(String modality) throws IOException, SQLException {
		Connection conn = PostgresConnection.getConnection();
		conn.setAutoCommit(false);
		String query = " update public.model_alert_action set isexclude = true where modality='"+modality+"' and to_char(alerttime,'yyyy') = '2019'";
		executeQuery(conn,query);
		query = "update public.model_alert_action set model_type = upper(model_type) where modality='"+modality+"' and to_char(alerttime,'yyyy') = '2019'";
		executeQuery(conn,query);
		conn.commit();
		conn.close();
		//refreshModelAlertView();
	}

	private static void removeDuplicateValues(String modality) throws IOException, SQLException {
		Connection conn = PostgresConnection.getConnection();
		conn.setAutoCommit(false);
		String query = " with query as (";
		query += " select max(id) as id, m.region,m.country,m.systemuid,m.systemtypename,m.systemtypemodel,m.catalognum,m.serialnumber , ";
		query += " m.aoid,m.softwareversion, m.modeluid,m.modelversion,m.alerttime,m.alertyearmonth,m.alertname,m.confidence,m.priority ";
		query += " from public.model_alert_action m join model_alert_action_vw s on  ";
		query += " m.region = s.region and m.country = s.country and m.systemuid = s.systemuid and m.systemtypename = s.systemtypename ";
		query += " and m.systemtypemodel = s.systemtypemodel and m.catalognum = s.catalognum and m.serialnumber = s.serialnumber ";
		query += " and m.aoid = s.aoid and m.softwareversion = s.softwareversion and m.alerttime = s.alerttime ";
		query += " and m.alertyearmonth = s.alertyearmonth and m.alertname = s.alertname and m.confidence = s.confidence ";
		query += " and m.model_type='RMW' and m.country != '' and to_char(m.alerttime,'yyyy') = '2019' ";
		query += " and m.priority = s.priority and m.sourcefilename = s.sourcefilename  ";
		//query += " and m.verticaImportTimestampUTC = s.verticaImportTimestampUTC ";
		query += " group by m.region,m.country,m.systemuid,m.systemtypename,m.systemtypemodel,m.catalognum,m.serialnumber, ";
		query += " m.aoid,m.softwareversion, m.modeluid,m.modelversion,m.alerttime,m.alertyearmonth,m.alertname,m.confidence,m.priority) ";
		query += " update public.model_alert_action set isexclude = false where id in (select id from query) ";
		executeQuery(conn,query);
		conn.commit();
		conn.close();
	}

	private static void refreshModelAlertView() throws IOException, SQLException {
		Connection conn = PostgresConnection.getConnection();
		conn.setAutoCommit(false);
		String query = " refresh materialized view model_alert_action_vw; ";
		executeQuery(conn,query);
		conn.commit();
		conn.close();
	}

	private static void updateCaseid(Connection conn) throws IOException, SQLException {
		String query = " with subquery as (select modeluid,caseid,max(alerttime) as alerttime from public.model_alert_action where alertaction in ('Case') and isexclude=false and country ";
		query += " != '' group by modeluid, caseid having count(caseid) > 1) UPDATE public.model_alert_action AS m SET isexclude=true FROM subquery AS s WHERE m.caseid = s.caseid ";
		query += " and m.modeluid=s.modeluid and m.alerttime != s.alerttime ";
		executeQuery(conn,query);
		
		query = " with subquery as (select modeluid,caseid,max(sourcefilename) as sourcefilename from public.model_alert_action where alertaction in ('Case') and isexclude=false and country ";
		query += " != '' group by modeluid, caseid having count(caseid) > 1) UPDATE public.model_alert_action AS m SET isexclude=true FROM subquery AS s WHERE m.caseid = s.caseid ";
		query += " and m.modeluid=s.modeluid and m.sourcefilename != s.sourcefilename ";
		executeQuery(conn,query);
		
		query = " with subquery as (select modeluid,caseid,max(id) as id from public.model_alert_action where alertaction in ('Case') and isexclude=false and country ";
		query += " != '' group by modeluid, caseid having count(caseid) > 1) UPDATE public.model_alert_action AS m SET isexclude=true FROM subquery AS s WHERE m.caseid = s.caseid ";
		query += " and m.modeluid=s.modeluid and m.id != s.id ";
		executeQuery(conn,query);
	}

	private static void updateCustomSnarReason(Connection conn) throws IOException, SQLException {
		String query = " update public.model_alert_action set custom_snarreason = snarreason; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set custom_snarreason='Customer already called' where snarreason like 'Late Alert%'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set custom_snarreason='Unmonitored markets' where snarreason like 'Region not monitored%'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set custom_snarreason='Out of contract systems' where snarreason like 'No Contract%'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set custom_snarreason='Technical snag' where snarreason like 'One Time%'; ";
		executeQuery(conn,query);
	}

	private static void updateMarketInfo(Connection conn) throws IOException, SQLException {
		String query = " update public.model_alert_action set market='APA' where country='VIET NAM'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set market='GRC' where country='TAIWAN, PROVINCE OF CHINA'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set market='APA' where country='KOREA, REPUBLIC OF'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set market='BNL' where country='THE NETHERLANDS'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set market='FRA' where country='REUNION'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set market='APA' where country='LAO PEOPLE''S DEMOCRATIC REPUBLIC'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set market='AFI' where country='TANZANIA, UNITED REPUBLIC OF'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set market='LAT' where country='VIRGIN ISLANDS, U.S.'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set market='CEE' where country='MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set market='FRA' where country='FRENCH POLYNESIA'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set market='FRA' where country='SAINT PIERRE AND MIQUELON'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set market='MET' where country='PALESTINIAN TERRITORY, OCCUPIED'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set market='LAT' where country='GUYANA';  ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set market='DAC' where country='LIECHTENSTEIN'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set market='UKI' where country='CAYMAN ISLANDS'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set market='BNL' where country='NETHERLANDS ANTILLES'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set market='NAM' where country='BAHAMAS'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set market='LAT' where country='BARBADOS'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set market='LAT' where country='BOLIVIA'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set market='APA' where country='IRAN~, ISLAMIC REPUBLIC OF'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set market='APA' where country='KOREA~, REPUBLIC OF'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set market='MET' where country='PALESTINIAN TERRITORY~, OCCUPIED'; ";
		executeQuery(conn,query);
		query = " update public.model_alert_action set market='GRC' where country='TAIWAN~, PROVINCE OF CHINA'; ";
		executeQuery(conn,query);
	}

	private static void executeQuery(Connection conn, String query) throws IOException, SQLException{
		PreparedStatement preparedStmt = conn.prepareStatement(query);
		preparedStmt.execute();
		//conn.close();
	}
}



main method


public static void main(String[] args) throws ClassNotFoundException, IOException, SQLException {
		String modality = args[1].toUpperCase();
		try {
			if (MODALITYNAME_LIST.contains(modality) && args[0].equalsIgnoreCase("alertinfo")) {
				String sourceFileName = RadarAlertDataTransfer.getSourceFileName(modality);
				System.out.println("Max sourceFileName is : " + sourceFileName);
				RadarAlertDataTransfer.importRadarAlertFromVerticaAndExport(modality, sourceFileName);
				RadarAlertDataTransfer.executePostProcessingQuery(modality);
				System.out.println("complete");
			} else if (MODALITYNAME_LIST.contains(modality) && args[0].equalsIgnoreCase("modelmetadata")) {
				ModelMetadataTransfer.importMetadataTablesFromVerticaAndExport(modality);
				System.out.println("complete");
			} else {
				LOGGER.error("invalid modality name of import type");
			}
		} catch (Exception e) {
			System.out.println(" error : " + e.getMessage());
		}
	}
}
